
---

**Weapon System:**
The weapon system in the game allows players to equip and use melee weapons with varying attack types and mechanics. Players can switch between two melee weapons and activate special abilities through the `SpellHolder` system, which is disabled when a weapon with special abilities is equipped. Below is an outline of the system's functionality, including the buttons and key features:

---

**Controls and Key Bindings:**

- **1:** Equip Empty Hand (deactivates any active weapon)
- **2:** Equip Weapon 1 (first melee weapon)
- **3:** Equip Weapon 2 (second melee weapon)
- **Left Mouse Button:** Attack with the currently equipped weapon

---

**Weapon Classes and Functionalities:**

---

**MeleeWeapon Class:**

The `MeleeWeapon` class is responsible for handling the properties and behaviors of melee weapons. Each weapon has its own settings for damage, attack cooldown, and animation triggers.

**Core Features:**
- **Weapon Model:** The visual representation of the weapon.
- **Weapon Animator:** Controls the animation for weapon attacks.
- **Attack Damage:** Defines the amount of damage the weapon deals when used.
- **Attack Cooldown:** Determines the time between consecutive attacks to prevent spamming.
- **Attack:** Triggers the weapon’s attack animation and damage output.
- **Cooldown Handling:** Prevents the weapon from attacking again before the cooldown expires.
- **Equip/Unequip Weapon:** Allows the player to equip or unequip the weapon, disabling the spell holder when equipped.

**Methods:**
- **Attack()**: Initiates the weapon’s attack, triggering the animation and applying damage.
- **EquipWeapon()**: Disables the player's `SpellHolder` component if equipped.
- **UnequipWeapon()**: Re-enables the `SpellHolder` when the weapon is unequipped.
- **ActivateWeapon()**: Activates the weapon model, making it visible in the game.
- **DeactivateWeapon()**: Deactivates the weapon model, making it invisible in the game.
- **AttackCooldown()**: Implements the cooldown after an attack to prevent spamming.

---

**MeleeWeaponHolder Class:**

The `MeleeWeaponHolder` class handles the switching between two melee weapons and attaches them to the player character’s designated weapon mount point. It also manages the activation and deactivation of weapon-specific abilities.

**Core Features:**
- **Weapon Mount Point:** Defines where the weapon will attach to the player character (e.g., hand or body).
- **Active Weapon:** Keeps track of the currently equipped weapon.
- **Weapon Switching:** Allows switching between the two melee weapons (Weapon 1 and Weapon 2) using number keys (1, 2, and 3).
- **Weapon Attack:** Triggers the attack action when the player presses the left mouse button.

**Methods:**
- **SetActiveWeapon()**: Switches between weapons by instantiating the selected weapon at the mount point and destroying the previous one.
- **Update()**: Monitors input for weapon switching (1, 2, 3) and attacks with the left mouse button.

---

**SpellHolder Class:**

The `SpellHolder` class allows the player to activate spells. It holds references to spells that are mapped to specific keys (Q and E) and can be cast in response to input.

**Core Features:**
- **Spell Activation:** Spells are activated using the Q and E keys.
- **Spell Casting:** The player can use the assigned spells, such as single-shot or area-effect spells, depending on the weapon equipped.

**Methods:**
- **Update()**: Monitors the player input for spell activation and calls the corresponding spell’s `CastSpell()` method.

---

**SpellConfigurator Class:**

The `SpellConfigurator` class handles the configuration and casting of different spell types, such as single-shot and area-effect spells (rectangular spells). This class includes settings for projectile speed, damage, and special effects like blinking for area spells.

**Core Features:**
- **Spell Types:** Supports different spell types:
  - **Single Shot:** Fires a single projectile with customizable speed, damage, and burst options.
  - **Rectangle:** Affects an area with a defined size, duration, and optional blinking effect.
- **Cooldown:** Ensures spells can’t be cast repeatedly before their cooldown period has expired.
- **Projectile & Area Effects:** Configures and instantiates projectiles for single-shot spells or handles the area-effect spells' behavior.

**Methods:**
- **CastSpell()**: Handles the logic of casting a spell based on its type (Single Shot or Rectangle).
- **CastSingleShot()**: Instantiates a projectile and applies speed and damage settings.
- **CastRectangle()**: Activates an area-effect spell, adjusting the collider size and applying the defined behavior, such as blinking.
- **StartCooldown()**: Implements the cooldown between spell casts.

---

**System Overview:**

1. **Weapon Switching:**
   - The player can switch between two equipped melee weapons using the 2 and 3 keys.
   - When switching to a weapon, the corresponding weapon is instantiated and attached to the player’s mount point.
   - Only one weapon can be equipped at a time, and it replaces the previous one.

2. **Weapon Attack:**
   - When the left mouse button is pressed, the currently equipped weapon performs an attack, triggering its animation and applying damage.
   - Each weapon has a cooldown between attacks to prevent spamming.

3. **Spell Handling:**
   - Spells can be cast using the Q and E keys.
   - The `SpellHolder` and `SpellConfigurator` manage different types of spells (single-shot or area-effect), with specific cooldown times and effects.
   - The spell system integrates with the weapon system, where some weapons may disable the spellcasting abilities (e.g., if a special weapon is equipped).

4. **Cooldowns:**
   - Both weapons and spells have cooldowns that prevent them from being used continuously. After each attack or spell cast, the system waits for the cooldown period before the action can be used again.

---

**Movement:**

---

**Controls and Key Bindings:**

- **W, A, S, D:** Move (Forward, Left, Back, Right)
- **Shift:** Run
- **Ctrl:** Crouch
- **Shift + Ctrl:** Slide (possibly with short immunity to dodge)
- **Space:** Jump

---

**Player Movement System - `PlayerMovement` Class**

The `PlayerMovement` class is responsible for handling the player's movement, including walking, sprinting, crouching, sliding, and jumping. It uses Unity's `CharacterController` component for smooth and physics-based player movement. Below are the key features and behaviors of the system:

**Core Parameters:**
- **Walk Speed:** The default movement speed when the player is walking.
- **Sprint Speed:** The increased movement speed when the player is sprinting.
- **Crouch Speed:** The reduced movement speed when the player is crouching.
- **Jump Force:** The upward force applied when the player jumps.
- **Gravity:** A constant force applied to the player's vertical movement when in the air, simulating gravity.
- **Crouch Height:** The height of the player's character model when crouching.
- **Default Height:** The character's standing height, which is restored after crouching.

**Slide (Roll) Parameters:**
- **Slide Duration:** The duration for which the player will perform the sliding action.
- **Slide Speed:** The speed at which the player moves while sliding.
- **Is Sliding:** A boolean flag that tracks whether the player is currently sliding or not.
- **Slide Timer:** A timer that tracks the remaining time for the sliding action.

**Main Movement:**
- The player’s movement is based on the input received from the keyboard (horizontal and vertical axes).
- The player’s movement is adjusted according to whether they are walking, sprinting, or crouching.
    - Walking is the default movement mode.
    - Sprinting is activated when the player holds the Left Shift key while grounded.
    - Crouching is activated when the player presses the Left Control key (if not sprinting), and crouch height is adjusted accordingly.

**Jumping:**
- Jumping is activated when the player presses the Space key while grounded.
- The player's vertical movement is updated based on the defined jump force, providing a jump action.

**Crouching and Sliding:**
- When the player presses the Left Control key, the system checks if the player is sprinting or not:
    - If Sprinting: The player performs a slide (roll), which is a fast, low-to-the-ground movement. During the slide, the player’s height is adjusted to the crouching height, and gravity is ignored for the duration of the slide.
    - If Not Sprinting: The player performs a crouch, lowering the player’s height to the crouch height and adjusting their movement speed.
- The crouch or slide action can be interrupted:
    - Crouch: Stops when the player releases the Left Control key.
    - Slide: Automatically stops after the duration has elapsed, and the player is returned to the default height and regular movement state.

**Gravity:**
- When the player is not grounded (i.e., in the air), gravity is applied to the player's vertical movement. The gravity makes the player fall at a constant rate, creating realistic jump physics.

**Additional Features:**
- The class ensures that no movement or gravity is applied while the player is in the middle of a slide.
- When sliding, the player's velocity is set to a predefined speed and movement occurs in the direction the player is facing, ignoring vertical movement (keeping the player at